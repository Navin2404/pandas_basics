# -*- coding: utf-8 -*-
"""Pandas_basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PEncEDIs523wpD-hmASQx3rB6wXLYGLl

Pandas Library:

useful for Data processing & Analysis

Pandas Data Frame:

pandas DataFrame is two dimensional tabular data structure with labeled axes (row and columns)
"""

#importing libraries
import pandas as pd
import numpy as np

#importing the dataset
dataset=pd.read_csv('/content/diabetes.csv')

#creating the boston data set
#importing boston house dataset
from sklearn.datasets import load_boston

boston_dataset = load_boston()

type(boston_dataset)

print(boston_dataset)

#Pandas dataframe
boston_df = pd.DataFrame(boston_dataset.data, columns = boston_dataset.feature_names)

boston_df.head()

boston_df.shape

type(boston_df)

"""importing the data from a csv file to a pandas DataFrame"""

diabetes_df = pd.read_csv('/content/diabetes.csv')

type(diabetes_df)

diabetes_df.head()

diabetes_df.shape

"""we can 

Loading the data from a excel file to a pandas DataFrame

pd.read_excel

Exporting a DataFrame to a CSV file
"""

boston_df.to_csv("boston.csv")

"""Exporting the pandas Dataframe to an excel file:

df.to_excel('filename')
"""

#creating a Dataframe with random values
random_df = pd.DataFrame(np.random.rand(20,10))

random_df.head()

random_df.shape

"""Inspecting a DataFrame"""

#Finding the number of rows & column
boston_df.shape

boston_df.tail()

#information about the Dataframe
boston_df.info()

boston_df.isnull().sum()

#counting the values based on labels
diabetes_df.value_counts('Outcome')

# group the values based on the mean
diabetes_df.groupby('Outcome').mean()

"""Statistical measures"""

#count or number of values
boston_df.count()

# mean value - column wise
boston_df.mean()

#standard deviation - column wise
boston_df.std()

#maximum value
boston_df.max()

#all the statistical measures 
boston_df.describe()

"""Manipulating Dataframe"""

#adding a column to a dataframe
boston_df['price']=boston_dataset.target

boston_df.head()

#removing a row 
boston_df.drop(index=0, axis=0)

#drop a column
boston_df.drop(columns='ZN',axis=1)

#locating a row using a index value
boston_df.iloc[2]

#locating a perticular column
print(boston_df.iloc[:,0])  #first column
print(boston_df.iloc[:,1])  #secondcolumn
print(boston_df.iloc[:,2]) #third column
print(boston_df.iloc[:,-1]) #last column

"""correlation:

1.Positive correlation

2.Negative correlation
"""

boston_df.corr()

